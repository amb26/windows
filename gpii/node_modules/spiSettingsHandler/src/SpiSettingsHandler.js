/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict"; 

var ffi = require("node-ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");
var spi = fluid.registerNamespace("gpii.windows.spi");

var NULL = new ffi.Pointer(0);

// Guide to node-ffi types and conversions:
// https://github.com/rbranson/node-ffi/wiki/Node-FFI-Tutorial

var user32 = new ffi.Library('user32', {
    // http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
    // UINT, UINT, PVOID, UINT; return type: BOOL
   'SystemParametersInfoW': [
      'int32', [ 'uint32', "uint32", 'pointer', 'uint32' ]
   ]
});

// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
windows.HighContrast = ffi.Struct([
    ["uint32", "cbSize"],
    ["uint32", "dwFlags"],
    ["pointer", "lpszDefaultScheme"]
]);

windows.spi.structures = {
    HighContrast: {
        cbSize: {
            type: "uint32",
            index: 0
        },
        dwFlags: {
            type: "uint32",
            index: 1,
            flagValues: ["HCF_AVAILABLE", "HCF_CONFIRMHOTKEY", "HCF_HIGHCONTRASTON", 
                         "HCF_HOTKEYACTIVE", "HCF_HOTKEYAVAILABLE", "HCF_HOTKEYSOUND", "HCF_INDICATOR"]
        },
        lpszDefaultScheme: {
            type: "string",
            index: 2
        }
    }  
};

// TODO Define additional structures used in calls to SystemParametersInfo here.

windows.spi.schemas = {
    highContrast: {
         setAction: "SPI_SETHIGHCONTRAST",
         getAction: "SPI_GETHIGHCONTRAST",
         paramType: "gpii.windows.spi.structures.HighContrast"
    }
};

/**
 * win.h constants used in SystemParametersInfo API
 */ 
windows.spi.constants = {
    "SPI_GETHIGHCONTRAST": 0x0042,
    "SPI_SETHIGHCONTRAST": 0x0043,
    // HIGHCONTRAST flags
    // http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
    "HCF_HIGHCONTRASTON":  0x00000001,
    "HCF_AVAILABLE":       0x00000002,
    "HCF_HOTKEYACTIVE":    0x00000004,
    "HCF_CONFIRMHOTKEY":   0x00000008,
    "HCF_HOTKEYSOUND":     0x00000010,
    "HCF_INDICATOR":       0x00000020,
    "HCF_HOTKEYAVAILABLE": 0x00000040
    // TODO Define additional flags that we need here.
};

/**
 * Contains structures that are used in calls to the SystemParametersInfo function,
 * accessible by their names. Used to dynamically instantiate the appropriate structure. 
 */
windows.structures = {
    "HIGHCONTRAST": windows.HighContrast
    // TODO Add additional structures that we need to instantiate here.
};

/**
 * Takes an array of flag names, applies binary OR among them and returns the result.
 * Used to supply the "dwFlags" argument of some structures.
 * 
 * @param {Array} flagNamesArray An array of flag names.
 *                These should be predefined in windows.flagConstants.
 */
windows.combineFlags = function (flagNamesArray) {
    var combinedFlags = 0;
    for (var index in flagNamesArray) {
        combinedFlags = combinedFlags || windows.flagConstants[flagNamesArray[index]];
    }
    return combinedFlags;
};

gpii.applyFlag = function (baseValue, flagValue, state) {
    return state? baseValue | flagValue : baseValue & ~flagValue; 
};

/** Multiplex flag values from a hash, by applying them to a base value bitwise, turning on or
 * off bits depending on whether the hash value is true or false
 */
gpii.multiplexFlags = function (baseValue, flagHash, table) {
    fluid.each(flagHash, function(value, key) {
        var flagValue = table[key];
        baseValue = gpii.applyFlag(baseValue, flagValue, value);
    });
    return baseValue;  
};

windows.spi.settingsToParam = function (schema, settings) {
     var plainParam = {};
     fluid.each(settings, function(value, key) {
         var decoded = value;
         if (key === "dwFlags") {
             // TODO: fetch original values
             decoded = gpii.multiplexFlags(0, value, windows.spi.constants);
         }
         plainParam[key] = decoded;
     });
     return plainParam;
};

/**
 * Creates an empty structure with a given name. It should be registered in the
 * <code>windows.structures</code> map with that name. If the structure has a <code>cbSize</code>
 * member, the function sets that member to the size of the structure using <code>ffi.sizeof</code>.
 * 
 * @param {String} structName The name of the structure to create. Should be registered in the
 *                 <code>windows.structures</code> map.
 * @return {Object} The newly created structure with its <code>cbSize</code> member initialized.
 */
windows.createEmptyStructure = function (structName) {
    var struct = new windows.structures[structName]();
    if (struct.cbSize !== undefined) {
        struct.cbSize = ffi.sizeof(windows.structures[structName]);
    }
    return struct;
};

/**
 * Gets the value of a setting stored in the <code>dwFlags</code> member of a given structure.
 * Fails if the call to <code>SystemParametersInfo</code> does not succeed.
 * 
 * @param {Integer} action Corresponds to the <code>uiAction</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {Integer} uiParam Corresponds to the <code>uiParam</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {String} structName The name of the structure where the settings are stored.
 * @param {String} flagName The name of the flag whose value we need.
 * @return {Boolean} True if the flag is set in the <code>dwFlags</code> member of the structure,
 *                   false otherwise.
 */
windows.spi.getValue = function (action, uiParam, structName) {
    console.log("getValue");
    var pvParam = windows.createEmptyStructure(structName);
    console.log("Making call with ", pvParam);
    var callSuccessful = user32.SystemParametersInfoW(action, uiParam, pvParam.ref(), 0);
    console.log("Returned ", pvParam, ": ", pvParam.lpszDefaultScheme);
    if (!callSuccessful) {
        fluid.fail("Could not get flag value with name " + flagName);
    }
    var struct = windows.spi.structures.HighContrast;
    var plainValue = {};
    for (var key in struct) {
        plainValue[key] = pvParam[key];
    }
    console.log("Plain value: ", plainValue);
    return plainValue;
};

/**
 * Sets the values of settings stored in the <code>dwFlags</code> member of a given structure.
 * 
 * @param {Integer} action Corresponds to the <code>uiAction</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {Integer} uiParam Corresponds to the <code>uiParam</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {String} structName The name of the structure where the settings are stored.
 * @param {Array} flagNames An array of flag names that need to be set to true.
 */
windows.spi.setValue = function (action, uiParam, structName, value) {
    console.log("Setting value ", value);
    var pvParam = windows.createEmptyStructure(structName);
    for (var key in value) {
        pvParam[key] = value[key];
    }
    var struct = windows.spi.structures.HighContrast;
    for (var key in struct) {
        console.log("key: " + key + " value: ", pvParam[key]);
    }
    //var combinedFlags = windows.combineFlags(flagNames);
    //pvParam.dwFlags = combinedFlags;
    console.log("pvParam ", pvParam, " uiParam", uiParam);
    var callSuccessful = user32.SystemParametersInfoW(action, uiParam, pvParam.ref(), 0);
    if (!callSuccessful) {
        fluid.fail("Could not set flag names " + flagNames + " in structure " + structName);
    }
    return pvParam;
};

/**
 * Entry point function of the component. Takes a payload as an input and sets the corresponding
 * settings using SystemParametersInfo. Returns an object containing the old and new values for each
 * of the settings.
 */
windows.spiSettingsHandler = function (payload) {
    // TODO Perform input data validation - e.g. whether the options correspond to the structure.
    var getAction = windows.spi.constants[payload.options.getAction];
    var setAction = windows.spi.constants[payload.options.setAction];
    var uiParam = payload.options.uiParam;
    var structName = payload.options.pvParamName;
    var results = {};
    var orig = windows.spi.getValue(getAction, uiParam, structName);
    var plainValue = windows.spi.settingsToParam({}, payload.settings);
    
    windows.spi.setValue(setAction, uiParam, structName, plainValue);
    var after = windows.spi.getValue(getAction, uiParam, structName);
    console.log(results);
    return results;
};


function testSelf() {
    windows.getFlagValue(windows.actionConstants["SPI_GETHIGHCONTRAST"], 12, "HIGHCONTRAST", "HCF_AVAILABLE");
}

if (process.argv[1].indexOf("piSettingsHandler") !== -1) {
    if (process.argv.length === 2) {
        testSelf();
    }
    else {
        var filename = __dirname + "/" + process.argv[2];
        var jsonFile = require(filename);
        var returnCode = windows.spiSettingsHandler(jsonFile);
    }
}
